import pandas as pd
import re
from io import BytesIO
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from loguru import logger
from pathlib import Path

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ logs –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = BASE_DIR / "logs"

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
LOG_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Loguru –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
logger.add(
    LOG_DIR / "{time:YYYY-MM-DD}.log",
    rotation="3 weeks",
    retention="3 weeks",
    compression="zip"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å ID –∞–≤—Ç–æ—Ä–æ–≤
author_ids = pd.read_csv("author_ids.csv")  # –¢–∞–±–ª–∏—Ü–∞ Author, TelegramID
author_dict = dict(zip(author_ids["Author"], author_ids["TelegramID"]))


# –£–¥–∞–ª—è–µ–º –∏–∑ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤—Å—é –Ω–µ–Ω—É–∂–Ω—É—é —à–µ–ª—É—Ö—É –≤–æ–∫—Ä—É–≥ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
def extract_account_number_1(text: str) -> str:
    pattern = r"(—Å—á–µ—Ç|—Å—á|—Å—á\.|‚Ññ|No|N|–ø–æ\s+—Å—á–µ—Ç—É|–Ω–∞\s+–æ–ø–ª–∞—Ç—É)?\s*‚Ññ?\s*(\d{1,5})"
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        number = int(match.group(2))
        if 1 <= number <= 20000:
            return str(number)
    return None


# –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤—Å—é –Ω–µ–Ω—É–∂–Ω—É—é —à–µ–ª—É—Ö—É –≤–æ–∫—Ä—É–≥ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
def extract_account_number_2(text: str) -> str:
    match = re.search(r"0(\d+)$", text)
    if match:
        number = int(match.group(1))
        if 1 <= number <= 20000:
            return str(number)
    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É (XLS –∏–ª–∏ HTML).")


def process_tables(table1: pd.DataFrame, table2: pd.DataFrame):
    messages = []
    unmatched = []

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –∫–æ–ª–æ–Ω–∫–∞ "–ö—Ä–µ–¥–∏—Ç" –ø—É—Å—Ç–∞ (Null/NaN)
    table1 = table1.dropna(subset=["–ö—Ä–µ–¥–∏—Ç"])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    table1["Extracted"] = table1["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"].apply(extract_account_number_1)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
    table2["Extracted"] = table2["–ù–æ–º–µ—Ä"].apply(extract_account_number_2)

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    for _, row in table1.iterrows():
        account_number = row["Extracted"]
        if account_number:
            match = table2[table2["Extracted"] == account_number]
            if not match.empty:
                author = match.iloc[0]["–ê–≤—Ç–æ—Ä"]
                client = match.iloc[0]["–ö–ª–∏–µ–Ω—Ç"]
                credit = row["–ö—Ä–µ–¥–∏—Ç"]
                purpose = row["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"]
                messages.append((author, f"–ö–ª–∏–µ–Ω—Ç {client} –æ–ø–ª–∞—Ç–∏–ª —Å—É–º–º—É üí≤{credit}üí≤\n- {purpose}"))  # noqa
            else:
                unmatched.append(row["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"])
        else:
            unmatched.append(row["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"])

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info(f"Messages: {messages}")
    logger.info(f"Unmatched: {unmatched}")

    return messages, unmatched


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    document = update.message.document

    if not document:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if "uploader_id" not in context.user_data:
        context.user_data["uploader_id"] = user_id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    file_name = document.file_name.lower()
    if not (file_name.endswith(".xls") or file_name.endswith(".xlsx") or file_name.endswith(".html") or file_name.endswith(".htm")):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –í–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É, –ø—Ä–æ—à—É –µ—â—ë —Ä–∞–∑ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await context.bot.get_file(document.file_id)
    file_bytes = BytesIO(await file.download_as_bytearray())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
    if "table1" not in context.user_data:
        try:
            if file_name.endswith(".html") or file_name.endswith(".htm"):
                table1 = pd.read_html(file_bytes)[0]
                context.user_data["table1"] = table1
                await update.message.reply_text("–ü–µ—Ä–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É.")
            else:
                context.user_data["table1"] = pd.read_excel(file_bytes)
                await update.message.reply_text("–ü–µ—Ä–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return
    elif "table2" not in context.user_data:
        try:
            if file_name.endswith(".html") or file_name.endswith(".htm"):
                table2 = pd.read_html(file_bytes)[0]
                context.user_data["table2"] = table2
            else:
                context.user_data["table2"] = pd.read_excel(file_bytes)

            table1 = context.user_data["table1"]
            table2 = context.user_data["table2"]

            logger.info(f"Table 1: {table1.head()}")
            logger.info(f"Table 2: {table2.head()}")

            messages, unmatched = process_tables(table1, table2)

            for author, message_text in messages:
                tg_id = author_dict.get(author, author_dict["Unknown"])
                try:
                    await context.bot.send_message(chat_id=tg_id, text=message_text)
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É {author}: {message_text}")  # noqa
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É {author}: {e}")

            if unmatched:
                unmatched_id = context.user_data["uploader_id"]

                unwanted_keywords = [
                    "—Å–∞–ª—å–¥–æ", "–∏—Ç–æ–≥ –æ–±–æ—Ä–æ—Ç–æ–≤", "–¥–µ–±–µ—Ç", "–∫—Ä–µ–¥–∏—Ç"]
                filtered_rows = table1[
                    table1["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"].isin(unmatched) &
                    ~table1["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"].str.contains(
                        "|".join(unwanted_keywords), case=False)
                ]

                unmatched_messages = [
                    f"–ö–ª–∏–µ–Ω—Ç {row['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']} –æ–ø–ª–∞—Ç–∏–ª —Å—É–º–º—É üí≤{row['–ö—Ä–µ–¥–∏—Ç']}üí≤\n- {row['–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ']}"  # noqa
                    for _, row in filtered_rows.iterrows()
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç
                if unmatched_messages:
                    unmatched_messages.insert(0, "üö® –ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ï –û–ü–õ–ê–¢–´ üö®")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∑–∏–ª —Ç–∞–±–ª–∏—Ü—ã
                    await context.bot.send_message(chat_id=unmatched_id, text="\n\n".join(unmatched_messages))
                    logger.info(f"–ù–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {unmatched_id}")  # noqa

            context.user_data.clear()
            await update.message.reply_text("‚ÄºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚ÄºÔ∏è")

        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.Document.ALL, handle_document))
    application.run_polling()


if __name__ == "__main__":
    main()
